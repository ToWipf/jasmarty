package org.wipf.jasmarty.logic.jasmarty.lcd12864;

import javax.enterprise.context.ApplicationScoped;

/**
 * @author wipf
 *
 */
@ApplicationScoped
public class Fonts {
	public int getFont1X = 6;
	public int getFont1Y = 8;

	/**
	 * @param c
	 * @return
	 */
	public byte[] getFont1(char c) {
		switch (c) {
		case ' ':
			return new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; //
		case '!':
			return new byte[] { 0x5F, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00 }; // !
		case '"':
			return new byte[] { 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00 }; // "
		case '#':
			return new byte[] { 0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14 }; // #
		case '$':
			return new byte[] { 0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00 }; // $
		case '%':
			return new byte[] { 0x63, 0x73, 0x18, 0x0C, 0x67, 0x63, 0x00 }; // %
		case '&':
			return new byte[] { 0x32, 0x7F, 0x4D, 0x4D, 0x77, 0x72, 0x50 }; // &
		case '\'':
			return new byte[] { 0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00 }; // '
		case '(':
			return new byte[] { 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00 }; // (
		case ')':
			return new byte[] { 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00 }; // )
		case '*':
			return new byte[] { 0x08, 0x2A, 0x3E, 0x1C, 0x3E, 0x2A, 0x08 }; // *
		case '+':
			return new byte[] { 0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00 }; // +
		case ',':
			return new byte[] { (byte) 0x80, (byte) 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00 }; // ,
		case '-':
			return new byte[] { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }; // -
		case '.':
			return new byte[] { 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00 }; // .
		case '/':
			return new byte[] { 0x40, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02 }; // /
		case '0':
			return new byte[] { 0x3E, 0x7F, 0x49, 0x45, 0x7F, 0x3E, 0x00 }; // 0
		case '1':
			return new byte[] { 0x40, 0x44, 0x7F, 0x7F, 0x40, 0x40, 0x00 }; // 1
		case '2':
			return new byte[] { 0x62, 0x73, 0x59, 0x49, 0x4F, 0x46, 0x00 }; // 2
		case '3':
			return new byte[] { 0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00 }; // 3
		case '4':
			return new byte[] { 0x18, 0x1C, 0x16, 0x13, 0x7F, 0x7F, 0x10 }; // 4
		case '5':
			return new byte[] { 0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00 }; // 5
		case '6':
			return new byte[] { 0x3E, 0x7F, 0x49, 0x49, 0x7B, 0x32, 0x00 }; // 6
		case '7':
			return new byte[] { 0x01, 0x01, 0x79, 0x7D, 0x07, 0x03, 0x00 }; // 7
		case '8':
			return new byte[] { 0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00 }; // 8
		case '9':
			return new byte[] { 0x26, 0x6F, 0x49, 0x49, 0x7F, 0x3E, 0x00 }; // 9
		case ':':
			return new byte[] { 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00 }; // :
		case ';':
			return new byte[] { (byte) 0x80, (byte) 0xC4, 0x44, 0x00, 0x00, 0x00, 0x00 }; // ;
		case '<':
			return new byte[] { 0x08, 0x1C, 0x36, 0x63, 0x41, 0x41, 0x00 }; // <
		case '=':
			return new byte[] { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 }; // =
		case '>':
			return new byte[] { 0x41, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00 }; // >
		case '?':
			return new byte[] { 0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00 }; // ?
		case '@':
			return new byte[] { 0x3E, 0x7F, 0x41, 0x4D, 0x6F, 0x2E, 0x00 }; // @
		case 'A':
			return new byte[] { 0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00 }; // A
		case 'B':
			return new byte[] { 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00 }; // B
		case 'C':
			return new byte[] { 0x3E, 0x7F, 0x41, 0x41, 0x63, 0x22, 0x00 }; // C
		case 'D':
			return new byte[] { 0x7F, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00 }; // D
		case 'E':
			return new byte[] { 0x7F, 0x7F, 0x49, 0x49, 0x41, 0x41, 0x00 }; // E
		case 'F':
			return new byte[] { 0x7F, 0x7F, 0x09, 0x09, 0x01, 0x01, 0x00 }; // F
		case 'G':
			return new byte[] { 0x3E, 0x7F, 0x41, 0x49, 0x7B, 0x3A, 0x00 }; // G
		case 'H':
			return new byte[] { 0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00 }; // H
		case 'I':
			return new byte[] { 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00 }; // I
		case 'J':
			return new byte[] { 0x20, 0x60, 0x41, 0x7F, 0x3F, 0x01, 0x00 }; // J
		case 'K':
			return new byte[] { 0x7F, 0x7F, 0x1C, 0x36, 0x63, 0x41, 0x00 }; // K
		case 'L':
			return new byte[] { 0x7F, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 }; // L
		case 'M':
			return new byte[] { 0x7F, 0x7F, 0x06, 0x0C, 0x06, 0x7F, 0x7F }; // M
		case 'N':
			return new byte[] { 0x7F, 0x7F, 0x0C, 0x18, 0x7F, 0x7F, 0x00 }; // N
		case 'O':
			return new byte[] { 0x3E, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00 }; // O
		case 'P':
			return new byte[] { 0x7F, 0x7F, 0x09, 0x09, 0x0F, 0x06, 0x00 }; // P
		case 'Q':
			return new byte[] { 0x1E, 0x3F, 0x21, 0x61, 0x7F, 0x5E, 0x00 }; // Q
		case 'R':
			return new byte[] { 0x7F, 0x7F, 0x19, 0x39, 0x6F, 0x46, 0x00 }; // R
		case 'S':
			return new byte[] { 0x26, 0x6F, 0x49, 0x49, 0x7B, 0x32, 0x00 }; // S
		case 'T':
			return new byte[] { 0x01, 0x01, 0x7F, 0x7F, 0x01, 0x01, 0x00 }; // T
		case 'U':
			return new byte[] { 0x3F, 0x7F, 0x40, 0x40, 0x7F, 0x3F, 0x00 }; // U
		case 'V':
			return new byte[] { 0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00 }; // V
		case 'W':
			return new byte[] { 0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F }; // W
		case 'X':
			return new byte[] { 0x41, 0x63, 0x3E, 0x3E, 0x63, 0x41, 0x00 }; // X
		case 'Y':
			return new byte[] { 0x07, 0x0F, 0x78, 0x78, 0x0F, 0x07, 0x00 }; // Y
		case 'Z':
			return new byte[] { 0x61, 0x71, 0x59, 0x4D, 0x47, 0x43, 0x00 }; // Z
		case '[':
			return new byte[] { 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00 }; // [
		// case 'TODO':
		// return new byte[] {0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40}; // BackSlash
		case ']':
			return new byte[] { 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00 }; // ]
		case '^':
			return new byte[] { 0x08, 0x0C, (byte) 0xFE, (byte) 0xFE, 0x0C, 0x08, 0x00 }; // ^
		case '_':
			return new byte[] { (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80,
					(byte) 0x80 }; // _
		case '`':
			return new byte[] { 0x1C, 0x3E, 0x63, 0x41, 0x63, 0x14, 0x14 }; // `
		case 'a':
			return new byte[] { 0x20, 0x74, 0x54, 0x54, 0x7C, 0x78, 0x00 }; // a
		case 'b':
			return new byte[] { 0x7F, 0x7F, 0x44, 0x44, 0x7C, 0x38, 0x00 }; // b
		case 'c':
			return new byte[] { 0x38, 0x7C, 0x44, 0x44, 0x44, 0x00, 0x00 }; // c
		case 'd':
			return new byte[] { 0x38, 0x7C, 0x44, 0x44, 0x7F, 0x7F, 0x00 }; // d
		case 'e':
			return new byte[] { 0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00 }; // e
		case 'f':
			return new byte[] { 0x08, 0x7E, 0x7F, 0x09, 0x09, 0x00, 0x00 }; // f
		case 'g':
			return new byte[] { (byte) 0x98, (byte) 0xBC, (byte) 0xA4, (byte) 0xA4, (byte) 0xFC, 0x7C, 0x00 }; // g
		case 'h':
			return new byte[] { 0x7F, 0x7F, 0x04, 0x04, 0x7C, 0x78, 0x00 }; // h
		case 'i':
			return new byte[] { 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00 }; // i
		case 'j':
			return new byte[] { (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0xFD, 0x7D, 0x00, 0x00 }; // j
		case 'k':
			return new byte[] { 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00 }; // k
		case 'l':
			return new byte[] { 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00 }; // l
		case 'm':
			return new byte[] { 0x78, 0x7C, 0x0C, 0x38, 0x0C, 0x7C, 0x78 }; // m
		case 'n':
			return new byte[] { 0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00 }; // n
		case 'o':
			return new byte[] { 0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00 }; // o
		case 'p':
			return new byte[] { (byte) 0xFC, (byte) 0xFC, 0x24, 0x24, 0x3C, 0x18, 0x00 }; // p
		case 'q':
			return new byte[] { 0x18, 0x3C, 0x24, 0x24, (byte) 0xFC, (byte) 0xFC, 0x00 }; // q
		case 'r':
			return new byte[] { 0x7C, 0x7C, 0x04, 0x04, 0x0C, 0x08, 0x00 }; // r
		case 's':
			return new byte[] { 0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00 }; // s
		case 't':
			return new byte[] { 0x04, 0x3F, 0x7F, 0x44, 0x44, 0x00, 0x00 }; // t
		case 'u':
			return new byte[] { 0x3C, 0x7C, 0x40, 0x40, 0x7C, 0x7C, 0x00 }; // u
		case 'v':
			return new byte[] { 0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00 }; // v
		case 'w':
			return new byte[] { 0x1C, 0x7C, 0x60, 0x38, 0x60, 0x7C, 0x1C }; // w
		case 'x':
			return new byte[] { 0x44, 0x6C, 0x38, 0x38, 0x6C, 0x44, 0x00 }; // x
		case 'y':
			return new byte[] { (byte) 0x9C, (byte) 0xBC, (byte) 0xA0, (byte) 0xE0, 0x7C, 0x3C, 0x00 }; // y
		case 'z':
			return new byte[] { 0x44, 0x64, 0x74, 0x5C, 0x4C, 0x44, 0x00 }; // z
		case '{':
			return new byte[] { 0x08, 0x3E, 0x7F, 0x41, 0x41, 0x00, 0x00 }; // {
		case '|':
			return new byte[] { (byte) 0xFF, (byte) 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00 }; // |
		case '}':
			return new byte[] { 0x41, 0x41, 0x7F, 0x3E, 0x08, 0x00, 0x00 }; // }
		case '~':
			return new byte[] { 0x10, 0x18, 0x18, 0x18, 0x08, 0x00, 0x00 }; // ~
//		case '':
//			return new byte[] { 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00 }; // 
//		case 'Ą':
//			return new byte[] { 0x7C, 0x7E, 0x13, 0x13, 0x7E, 0xFC, 0x80 }; // Ą
//		case '!':
//			return new byte[] { 0x3C, 0x7E, 0x46, 0x43, 0x66, 0x24, 0x00 }; // !
//		case '"':
//			return new byte[] { 0x7F, 0x7F, 0x49, 0x49, 0x41, 0xC1, 0x80 }; // "
//		case '#':
//			return new byte[] { 0x7F, 0x7F, 0x48, 0x44, 0x40, 0x40, 0x00 }; // #
//		case '$':
//			return new byte[] { 0x7E, 0x7E, 0x0C, 0x19, 0x7E, 0x7E, 0x00 }; // $
//		case '%':
//			return new byte[] { 0x3C, 0x7E, 0x46, 0x43, 0x7E, 0x3C, 0x00 }; // %
//		case '&':
//			return new byte[] { 0x24, 0x6E, 0x4A, 0x4E, 0x7B, 0x30, 0x00 }; // &
//		case '\'':
//			return new byte[] { 0x62, 0x76, 0x5A, 0x4F, 0x46, 0x42, 0x00 }; // '
//		case '(':
//			return new byte[] { 0x69, 0x79, 0x59, 0x4D, 0x4F, 0x4B, 0x00 }; // (
//		case 'ą':
//			return new byte[] { 0x20, 0x74, 0x54, 0x54, 0x7C, 0xF8, 0x80 }; // ą
//		case '*':
//			return new byte[] { 0x38, 0x7C, 0x44, 0x46, 0x45, 0x00, 0x00 }; // *
//		case '+':
//			return new byte[] { 0x38, 0x7C, 0x54, 0x54, 0xDC, 0x98, 0x00 }; // +
//		case ',':
//			return new byte[] { 0x51, 0x7F, 0x7F, 0x44, 0x00, 0x00, 0x00 }; // ,
//		case '-':
//			return new byte[] { 0x7C, 0x7C, 0x04, 0x06, 0x7D, 0x78, 0x00 }; // -
//		case '.':
//			return new byte[] { 0x38, 0x7C, 0x44, 0x46, 0x7D, 0x38, 0x00 }; // .
//		case '/':
//			return new byte[] { 0x48, 0x5C, 0x54, 0x56, 0x75, 0x24, 0x00 }; // /
//		case '0':
//			return new byte[] { 0x44, 0x64, 0x76, 0x5D, 0x4C, 0x44, 0x00 }; // 0
//		case '1':
//			return new byte[] { 0x44, 0x64, 0x75, 0x5D, 0x4C, 0x44, 0x00 }; // 1
		default:
			return null;
		}
	}
}
